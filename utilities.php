<?phpclass utilities {		public function random_user_agent(){				$choice = rand(1,2);		if($choice == 1){			$os = array(				"Macintosh; Intel Mac OS X 10_8_3",				"Windows NT 5.1",				"Windows NT 6.1; WOW64",				"X11; CrOS armv7l 2913.260.0",				"X11; Linux x86_64",				"X11; FreeBSD amd64",				"Windows NT 6.2; WOW64",				"Windows NT 6.1",				"Macintosh; Intel Mac OS X 10_7_3",				"Macintosh; Intel Mac OS X 10_6_8",				"Macintosh; Intel Mac OS X 10_7_2",				"Windows NT 6.0",				"Windows; U; Windows NT 5.1; en-US",				"Windows; U; Windows NT 6.1; en-US",				"Macintosh; U; Intel Mac OS X 10_6_6; en-US",				"X11; U; Linux i686; en-US",				"Windows; U; Windows NT 6.1; en-US; Valve Steam GameOverlay; ",			);			$os_put = $os[rand(0, (count($os)-1))];			$applewebkit_version = rand(525,537).".".rand(0, 31);			$chrome_version = rand(1, 28).".0.".rand(100, 1500).".".rand(20, 50);			return "Mozilla/5.0 (".$os_put.") AppleWebKit/".$applewebkit_version." (KHTML, like Gecko) Chrome/".$chrome_version." Safari/".$applewebkit_version;		}else{			$os = array(				"Macintosh; Intel Mac OS X 10.8; rv:24.0",				"Windows NT 6.1; WOW64; rv:23.0",				"Windows NT 6.1; rv:22.0",				"X11; Ubuntu; Linux x86_64; rv:21.0",				"Windows NT 5.0; rv:21.0",				"X11; Ubuntu; Linux i686; rv:15.0",				"Windows; U; Windows NT 5.1; en-US; rv:1.9.1.16",				"compatible; Windows; U; Windows NT 6.2; WOW64; en-US; rv:12.0",				"Macintosh; I; Intel Mac OS X 11_7_9; de-LI; rv:1.9b4",				"X11; Mageia; Linux x86_64; rv:10.0.9",				"X11; FreeBSD amd64; rv:5.0",				"X11; U; OpenBSD i386; en-US; rv:1.9.2.8",				"Macintosh; U; PPC Mac OS X 10.4; en-GB; rv:1.9.2.19",				"X11; U; Linux x86_64; ja-JP; rv:1.9.2.16",				"X11; U; Linux armv7l; en-US; rv:1.9.2.14",				"X11; U; Linux MIPS32 1074Kf CPS QuadCore; en-US; rv:1.9.2.13",				"X11; U; NetBSD i386; en-US; rv:1.9.2.12",				"X11; U; SunOS i86pc; fr; rv:1.9.0.4",				"ZX-81; U; CP/M86; en-US; rv:1.8.0.1"			);			$front_num = rand(5,6);			$date = rand(2004, 2013).$this->fix_num_date(rand(1,12)).$this->fix_num_date(rand(1,30));			return "Mozilla/".$front_num.".0 (".$os[rand(0, (count($os)-1))].") Gecko/".$date." Firefox/".rand(1,24).".0";		}			}		public function convert_size_byte($size){		switch (true){		case ($size > 1099511627776):			$size /= 1099511627776;			$suffix = 'TB';			break;		case ($size > 1073741824):			$size /= 1073741824;			$suffix = 'GB';			break;		case ($size > 1048576):			$size /= 1048576;			$suffix = 'MB';    			break;		case ($size > 1024):			$size /= 1024;			$suffix = 'KB';			break;		default:			$suffix = 'B';		}		return round($size, 2).$suffix;	}		public function get_icon($file){		$ext = explode('.', $file);		$ext = $ext[count($ext) - 1];		switch($ext){			case 'php':				return 'php';				break;			case 'c':				return 'c';				break;			case 'cpp':				return 'c++';				break;			case 'swf':				return 'flash';				break;			case 'htm':			case 'css':				return 'css';				break;			case 'js':				return 'javascript';				break;			case 'html':				return 'html';				break;			case 'asp':				return 'asp';				break;			case 'pl':				return 'perl';				break;			case 'py':				return 'python';				break;			case 'ini':				return 'ini';				break;			case 'htaccess':				return 'htaccess';				break;		}		$video = array(			"3g2",			"3gp",			"asf",			"asx",			"avi",			"flv",			"mov",			"mp4",			"mpg",			"rm",			"swf",			"vob",			"wmv",			"divx",			"mkv",			"webm"		);		$image = array(			"bmp",			"gif",			"jpg",			"png",			"psd",			"pspimage",			"thm",			"tif",			"yuv",			"ai",			"drw",			"eps",			"ps",			"svg"		);		$archive = array(			"7z",			"deb",			"gz",			"pkg",			"rar",			"rpm",			"sit",			"sitx",			"xz",			"bz2",			"zip",			"zipx"		);		$database = array(			"accdb",			"db",			"dbf",			"mdb",			"pdb",			"sql"		);		$audio = array(			"aif",			"iff",			"m3u",			"m4a",			"mid",			"mp3",			"mpa",			"ra",			"wav",			"wma"		);		$text = array(			"doc",			"docx",			"log",			"msg",			"pages",			"rtf",			"txt",			"wpd",			"wps"		);		$disc = array(			"dmg",			"iso",			"toast",			"vcd"		);		if(in_array($ext, $video)){			return "video";		}elseif(in_array($ext, $image)){			return "picture";		}elseif(in_array($ext, $archive)){			return "archive";		}elseif(in_array($ext, $database)){			return "database";		}elseif(in_array($ext, $audio)){			return "audio";		}elseif(in_array($ext, $disc)){			return "image";		}elseif(in_array($ext, $text)){			return "txt";		}else{			return "file";		}	}		public function split_dir($dir, $type){		if($type == "FOLDER"){			if(substr($dir, -1) != "/"){				$dir .= "/";			}		}else{			$l = explode('/', $dir);			$dir = str_replace($l[count($l)-1], "", $dir);		}		$collect = array();		$collect[] = "/";		foreach(array_filter(explode('/', $dir)) as $list){			$collect[] = $list."/";		}		return $collect;	}		public function dir_return($dir){		$l = explode('/', $dir);		return str_replace($l[count($l)-2]."/", "", $dir);	}		protected function fix_num_date($int){		$store = "";		($int < 10 ? $store = "0".$int : $store = $int);		return $store;	}		function get_permission_text($perms){		if (($perms & 0xC000) == 0xC000) {			$info = 's';		} elseif (($perms & 0xA000) == 0xA000) {			$info = 'l';		} elseif (($perms & 0x8000) == 0x8000) {			$info = '-';		} elseif (($perms & 0x6000) == 0x6000) {			$info = 'b';		} elseif (($perms & 0x4000) == 0x4000) {			$info = 'd';		} elseif (($perms & 0x2000) == 0x2000) {			$info = 'c';		} elseif (($perms & 0x1000) == 0x1000) {			$info = 'p';		} else {			$info = 'u';		}		$info .= (($perms & 0x0100) ? 'r' : '-');		$info .= (($perms & 0x0080) ? 'w' : '-');		$info .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x' ) : (($perms & 0x0800) ? 'S' : '-'));		$info .= (($perms & 0x0020) ? 'r' : '-');		$info .= (($perms & 0x0010) ? 'w' : '-');		$info .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x' ) : (($perms & 0x0400) ? 'S' : '-'));		$info .= (($perms & 0x0004) ? 'r' : '-');		$info .= (($perms & 0x0002) ? 'w' : '-');		$info .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x' ) : (($perms & 0x0200) ? 'T' : '-'));		return $info;	}		public function encrypt_password($string){		return hash('adler32', hash('sha512', $string));	}		public function encrypt_cookie($string){		return hash('crc32b', hash('gost', $string));	}		protected function arrange_info_linux($data){		$line_break = explode("\n", $data);		$collect1 = array();		$collect2 = array();		foreach($line_break as $num => $line){			$line = explode(":", $line);			$tmp = trim($line[0]);			if(!empty($tmp)){				$collect1[] = trim($line[0]);				$collect2[] = trim($line[1]);			}		}		return array_unique(array_combine($collect1, $collect2));	}		public function fix_array($array){			$array_flip = array_flip($array);		$num = 1;		for($i = 0;$i < count($array_flip);$i++){			$array_flip[$array[$i]] = $num;			$num++;		}		return array_filter(array_flip($array_flip));			}}?>